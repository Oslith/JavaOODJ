/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment;


import Classes.Order;
import java.util.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author vallerie
 */
public class VendorOrderConfirm extends javax.swing.JFrame {
    
    private Order order;
    private TableRowSorter<TableModel> sorter;
    /**
     * Creates new form VendorOrderConfirm
     */ 
    public VendorOrderConfirm() {
        initComponents();
        
        String filePath = Config.getFilePath("OrderListPath"); 
        File file = new File(filePath);

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            DefaultTableModel vendorTable = (DefaultTableModel) Table_ViewOrder.getModel();
            String line;

            while ((line = br.readLine()) != null) {
                String[] dataRow = line.split("/");
                if (dataRow.length == 8 && (dataRow[7].equals("Accepted")||dataRow[7].equals("Pending"))) { // Assuming each line has 3 data parts
                    vendorTable.addRow(dataRow);
                }
            }
            br.close();
            
            sorter = new TableRowSorter<>(vendorTable);
            Table_ViewOrder.setRowSorter(sorter);
            
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "File not found: " + filePath);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error reading file: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_Search = new javax.swing.JButton();
        txt_Search = new javax.swing.JTextField();
        btn_Back1 = new javax.swing.JButton();
        btn_Accept = new javax.swing.JButton();
        btn_Decline = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_ViewOrder = new javax.swing.JTable();
        btn_Ready = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setText("View Order History");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel2.setText("View Order Confirmation");

        btn_Search.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btn_Search.setText("Search");
        btn_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SearchActionPerformed(evt);
            }
        });

        txt_Search.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txt_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_SearchActionPerformed(evt);
            }
        });

        btn_Back1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btn_Back1.setText("Back");
        btn_Back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Back1ActionPerformed(evt);
            }
        });

        btn_Accept.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btn_Accept.setText("Accept");
        btn_Accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AcceptActionPerformed(evt);
            }
        });

        btn_Decline.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btn_Decline.setText("Decline");
        btn_Decline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeclineActionPerformed(evt);
            }
        });

        Table_ViewOrder.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        Table_ViewOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OrderID", "CustomerID", "Date", "FoodID", "FoodName", "Quantity", "Total", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Table_ViewOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Table_ViewOrderMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table_ViewOrder);

        btn_Ready.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btn_Ready.setText("Ready");
        btn_Ready.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ReadyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btn_Back1)
                        .addGap(65, 65, 65)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_Search)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_Accept)
                                .addGap(18, 18, 18)
                                .addComponent(btn_Decline)
                                .addGap(18, 18, 18)
                                .addComponent(btn_Ready))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(btn_Back1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_Decline)
                        .addComponent(btn_Search)
                        .addComponent(btn_Accept)
                        .addComponent(btn_Ready)))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_Back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Back1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        VendorMain af= new VendorMain();
        af.setVisible(true);
    }//GEN-LAST:event_btn_Back1ActionPerformed

    private void btn_AcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AcceptActionPerformed
        DefaultTableModel ViewOrder = (DefaultTableModel) Table_ViewOrder.getModel();
        
        int selectedRow = Table_ViewOrder.getSelectedRow();
        if(Table_ViewOrder.getSelectedRowCount() == 1){
            String OrderID = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 0).toString();
            String CustomerID = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 1).toString();
            String Date = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 2).toString();
            String VendorID = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 3).toString();
            String FoodID = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 4).toString();
            String Quantity = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 5).toString();
            String Total = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 6).toString();
            String Status = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 7).toString();
            
            if(Status.equals("Pending")){
                ViewOrder.setValueAt("Accepted", selectedRow, 7);
                Status = "Accepted";
                JOptionPane.showMessageDialog(this, "Order status updated to Accepted.");

              
            }else{
                if (Table_ViewOrder.getSelectedRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "Table is empty");
                } else if(!Status.equals("Pending")){
                    JOptionPane.showMessageDialog(this, "Please select an order that is Pending.");
                }else{
                    JOptionPane.showMessageDialog(this, "Haven't selected any table row");
                }        
            }
            
            String filePath = Config.getFilePath("OrderListPath");
                File file = new File(filePath);
                
                try{
                    BufferedReader br = new BufferedReader(new FileReader(file));
                    List<String> lines = new ArrayList<>();
                    String line;
                    
                    while ((line = br.readLine()) != null) {
                        lines.add(line);
                    }

                    br.close();
                    
                    for (int i = 0; i < lines.size(); i++) {
                        String[] data = lines.get(i).split("/");
                        if (data.length > 1) {
                            String updatedLine = OrderID +"/" 
                                                + CustomerID + "/" 
                                                + Date + "/" 
                                                + VendorID + "/" 
                                                + FoodID + "/" 
                                                + Quantity + "/" 
                                                + Total + "/" 
                                                + Status;
                            lines.set(i, updatedLine);

                            // Write the updated list back to the file
                            BufferedWriter bw = new BufferedWriter(new FileWriter(file));
                            for (String updated : lines) {
                                bw.write(updated + "\n");
                            }

                            bw.close();

                            return;
                        }
                    
                    }
                }catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error updating text file: " + ex.getMessage());
                }
            
            
        }
        /*TODO add your handling code here:
        int selectedRow = Table_ViewOrder.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an order to accept.");
            return;
        }

        String filePath = Config.getFilePath("OrderListPath");
        File file = new File(filePath);
        List<String> lines = new ArrayList<>();
        DefaultTableModel vendorTable = (DefaultTableModel) Table_ViewOrder.getModel();

                
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            while ((line = br.readLine()) != null) {
                lines.add(line);
            }
            br.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error reading file: " + ex.getMessage());
            return;
        }

        // Modify the selected order's status to "Accepted"
        if (selectedRow < lines.size()) {
            String[] dataRow = lines.get(selectedRow).split("/");
            if (dataRow.length >= 8 && dataRow[7].equals("Pending")) {
                dataRow[7] = "Accepted"; // Assuming the status is in the 8th column
                vendorTable.setValueAt("Ready", selectedRow, 7);
                lines.set(selectedRow, String.join("/", dataRow));
                try {
                    BufferedWriter bw = new BufferedWriter(new FileWriter(file, false));
                    for (String line : lines) {
                        bw.write(line);
                        bw.newLine();
                    }
                    bw.close();
                    JOptionPane.showMessageDialog(this, "Order status updated to Accepted.");
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error writing file: " + ex.getMessage());
                }
            }
        }

        */ 
    }//GEN-LAST:event_btn_AcceptActionPerformed

    private void txt_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_SearchActionPerformed

    private void btn_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SearchActionPerformed
        // TODO add your handling code here:
        String searchText = txt_Search.getText();
        filterTable(searchText);
    }//GEN-LAST:event_btn_SearchActionPerformed

    private void filterTable(String searchText) {
        RowFilter<TableModel, Object> rowFilter = new RowFilter<TableModel, Object>() {
            public boolean include(RowFilter.Entry<? extends TableModel, ? extends Object> entry) {
                for (int i = entry.getValueCount() - 1; i >= 0; i--) {
                    if (entry.getStringValue(i).equals(searchText)) {
                        return true;
                    }
                }
                return false;
            }
        };
    sorter.setRowFilter(rowFilter);
    }
    
    private void Table_ViewOrderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_ViewOrderMouseReleased
        // TODO add your handling code here:
        DefaultTableModel VendorTable = (DefaultTableModel) Table_ViewOrder.getModel();
        String OrderID = VendorTable.getValueAt(Table_ViewOrder.getSelectedRow(), 0).toString();
        String CustomerID = VendorTable.getValueAt(Table_ViewOrder.getSelectedRow(), 1).toString();
        String Date = VendorTable.getValueAt(Table_ViewOrder.getSelectedRow(), 2).toString();
        String VendorID = VendorTable.getValueAt(Table_ViewOrder.getSelectedRow(), 3).toString();
        String FoodID = VendorTable.getValueAt(Table_ViewOrder.getSelectedRow(), 4).toString();
        String Quantity = VendorTable.getValueAt(Table_ViewOrder.getSelectedRow(), 5).toString();
        Double Total = Double.valueOf(VendorTable.getValueAt(Table_ViewOrder.getSelectedRow(), 6).toString());
        String Status = VendorTable.getValueAt(Table_ViewOrder.getSelectedRow(), 7).toString();
            
        Order order = new Order(OrderID, CustomerID, Date, VendorID, FoodID, Quantity, Total, Status);
        this.order = order;
    }//GEN-LAST:event_Table_ViewOrderMouseReleased

    
    
    private void btn_DeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeclineActionPerformed
        // TODO add your handling code here:
         DefaultTableModel ViewOrder = (DefaultTableModel) Table_ViewOrder.getModel();
        
        if(Table_ViewOrder.getSelectedRowCount() == 1){
            String OrderID = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 0).toString();
            String Status = ViewOrder.getValueAt(Table_ViewOrder.getSelectedRow(), 7).toString();
            
            if(Status.equals("Pending")){
                String filePath = Config.getFilePath("OrderListPath");
                File file = new File(filePath);
                List<String> lines = new ArrayList<>();
                String lineToRemove = "";

                try {
                    BufferedReader br = new BufferedReader(new FileReader(file));
                    String line;
                    while ((line = br.readLine()) != null) {
                        lines.add(line);
                        String[] dataRow = line.split("/");
                        if (dataRow[0].equals(OrderID)) {
                            lineToRemove = line;
                        }
                    }
                    br.close();
                    if (!lineToRemove.isEmpty()) {
                        lines.remove(lineToRemove);
                        // Write the remaining lines back to the file
                        BufferedWriter bw = new BufferedWriter(new FileWriter(file));
                        for (String l : lines) {
                            bw.write(l + System.lineSeparator());
                        }
                        bw.close();
                        // Remove row from the table
                        ViewOrder.removeRow(Table_ViewOrder.getSelectedRow());
                    }

                }catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(this, "File not found.");
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error reading or writing file.");
                }
            }else{
                if (Table_ViewOrder.getSelectedRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "Table is empty");
                }else if(!Status.equals("Pending")){
                    JOptionPane.showMessageDialog(this, "Please select an order to accept.");
                } else {
                    JOptionPane.showMessageDialog(this, "Haven't selected any table row");
                }  
            }
            
            
        }
    }//GEN-LAST:event_btn_DeclineActionPerformed

    private void btn_ReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ReadyActionPerformed
        // TODO add your handling code here:
        int selectedRow = Table_ViewOrder.getSelectedRow();
        DefaultTableModel ViewOrder = (DefaultTableModel) Table_ViewOrder.getModel();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an order to mark as ready.");
            return;
        }
        
        String filePath = Config.getFilePath("OrderListPath");
        File file = new File(filePath);
        DefaultTableModel vendorTable = (DefaultTableModel) Table_ViewOrder.getModel();
        List<String> lines = new ArrayList<>();
        String lineToRemove = "";
                
        boolean orderReady = false;
        if (selectedRow < lines.size()) {
            String[] dataRow = lines.get(selectedRow).split("/"); // Change delimiter if needed
            if (dataRow.length >= 8 && "Accepted".equals(dataRow[7])) {
                dataRow[7] = "Ready"; // Update status to Ready
                orderReady = true;
            } else {
                JOptionPane.showMessageDialog(this, "Only accepted orders can be marked as ready.");
                return;
            }
        }
        
    try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;

            while ((line = br.readLine()) != null) {
                lines.add(line);
            }

            br.close();

            if (selectedRow < lines.size()) {
            String[] dataRow = lines.get(selectedRow).split("/");
            if (dataRow.length >= 8 && "Accepted".equals(dataRow[7])) {
                dataRow[7] = "Ready"; // Update status to Ready
                lines.set(selectedRow, String.join("/", dataRow));

                // Rewrite the updated content back to the file
                BufferedWriter bw = new BufferedWriter(new FileWriter(file, false));
                for (String updatedLine : lines) {
                    bw.write(updatedLine);
                    bw.newLine();
                }
                bw.close();

                // Update the table view
                vendorTable.setValueAt("Ready", selectedRow, 7); // Update status in the table
                ViewOrder.removeRow(Table_ViewOrder.getSelectedRow());

                JOptionPane.showMessageDialog(this, "Order status updated to Ready.");
            } else {
                JOptionPane.showMessageDialog(this, "Only accepted orders can be marked as ready.");
            }
        }
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error processing file: " + ex.getMessage());
        return;
    }

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            while ((line = br.readLine()) != null) {
                lines.add(line);
            }
            br.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error reading file: " + ex.getMessage());
            return;
        }

        // Modify the selected order's status to "Ready"

        
        
        if(orderReady) {
            // Rewrite the updated content back to the file
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter(file, false));
                for (String line : lines) {
                    bw.write(line);
                    bw.newLine();
                }
                bw.close();
                JOptionPane.showMessageDialog(this, "Order status updated to Ready.");
                
                DefaultTableModel table = (DefaultTableModel) Table_ViewOrder.getModel();
                table.removeRow(Table_ViewOrder.getSelectedRow());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error writing file: " + ex.getMessage());
                return;
            }
        }
    }//GEN-LAST:event_btn_ReadyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VendorOrderConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VendorOrderConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VendorOrderConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VendorOrderConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VendorOrderConfirm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table_ViewOrder;
    private javax.swing.JButton btn_Accept;
    private javax.swing.JButton btn_Back1;
    private javax.swing.JButton btn_Decline;
    private javax.swing.JButton btn_Ready;
    private javax.swing.JButton btn_Search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txt_Search;
    // End of variables declaration//GEN-END:variables

    private void loadTableData() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
